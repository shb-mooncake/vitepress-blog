const e=JSON.parse('{"key":"v-2f4bc29f","path":"/algorithm/designmode.html","title":"前端设计模式","lang":"zh-CN","frontmatter":{"title":"前端设计模式","icon":"file","order":1,"author":"moonandcake","date":"2023-12-08T00:00:00.000Z","sticky":false,"star":true,"footer":null,"copyright":null,"description":"六大原则：\\r依赖倒置原则(Dependence Inversion Principle)：高层(业务层)不应该直接调用底层(基础层)模块; \\r开闭原则(Open Close Principle)：单模块对拓展开放、对修改关闭; \\r单一原则(Single Responsibility Principle)：单模块负责的职责必须是单一的; \\r迪米特法则(L...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/algorithm/designmode.html"}],["meta",{"property":"og:site_name","content":"moonandcake"}],["meta",{"property":"og:title","content":"前端设计模式"}],["meta",{"property":"og:description","content":"六大原则：\\r依赖倒置原则(Dependence Inversion Principle)：高层(业务层)不应该直接调用底层(基础层)模块; \\r开闭原则(Open Close Principle)：单模块对拓展开放、对修改关闭; \\r单一原则(Single Responsibility Principle)：单模块负责的职责必须是单一的; \\r迪米特法则(L..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-12T07:59:44.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"前端设计模式"}],["meta",{"property":"article:author","content":"moonandcake"}],["meta",{"property":"article:published_time","content":"2023-12-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-12T07:59:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前端设计模式\\",\\"image\\":[\\"https://mister-hope.github.io/\\"],\\"datePublished\\":\\"2023-12-08T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-12T07:59:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moonandcake\\"}]}"]]},"headers":[{"level":2,"title":"六大原则：","slug":"六大原则","link":"#六大原则","children":[]},{"level":2,"title":"一、创建型","slug":"一、创建型","link":"#一、创建型","children":[{"level":3,"title":"1.构造器模式：抽象了对象实例的变与不变(变的是属性值，不变的是属性名)","slug":"_1-构造器模式-抽象了对象实例的变与不变-变的是属性值-不变的是属性名","link":"#_1-构造器模式-抽象了对象实例的变与不变-变的是属性值-不变的是属性名","children":[]},{"level":3,"title":"2. 工厂模式：为创建一组相关或相互依赖的对象提供一个接口，且无须指定它们的具体类","slug":"_2-工厂模式-为创建一组相关或相互依赖的对象提供一个接口-且无须指定它们的具体类","link":"#_2-工厂模式-为创建一组相关或相互依赖的对象提供一个接口-且无须指定它们的具体类","children":[]},{"level":3,"title":"3. 单例模式：全局只有一个实例，避免重复创建对象，优化性能","slug":"_3-单例模式-全局只有一个实例-避免重复创建对象-优化性能","link":"#_3-单例模式-全局只有一个实例-避免重复创建对象-优化性能","children":[]}]},{"level":2,"title":"二、结构型","slug":"二、结构型","link":"#二、结构型","children":[{"level":3,"title":"1. 适配器模式:适配独立模块，保证模块间的独立解耦且连接兼容","slug":"_1-适配器模式-适配独立模块-保证模块间的独立解耦且连接兼容","link":"#_1-适配器模式-适配独立模块-保证模块间的独立解耦且连接兼容","children":[]},{"level":3,"title":"2. 装饰器模式：动态将责任附加到对象之上","slug":"_2-装饰器模式-动态将责任附加到对象之上","link":"#_2-装饰器模式-动态将责任附加到对象之上","children":[]},{"level":3,"title":"3. 代理模式：使用代理人来替代原始对象处理更专业的事情","slug":"_3-代理模式-使用代理人来替代原始对象处理更专业的事情","link":"#_3-代理模式-使用代理人来替代原始对象处理更专业的事情","children":[]}]},{"level":2,"title":"三、行为型","slug":"三、行为型","link":"#三、行为型","children":[{"level":3,"title":"1. 观察者模式:当一个属性发生变化时，观察者会连续引发所有的相关状态变更","slug":"_1-观察者模式-当一个属性发生变化时-观察者会连续引发所有的相关状态变更","link":"#_1-观察者模式-当一个属性发生变化时-观察者会连续引发所有的相关状态变更","children":[]},{"level":3,"title":"2. 模版模式：在模版中，定义好每个方法的执行步骤。方法本身关注于自己的事情","slug":"_2-模版模式-在模版中-定义好每个方法的执行步骤。方法本身关注于自己的事情","link":"#_2-模版模式-在模版中-定义好每个方法的执行步骤。方法本身关注于自己的事情","children":[]},{"level":3,"title":"3. 命令模式:请求以指令的形式包裹在对象中，并传给调用对象","slug":"_3-命令模式-请求以指令的形式包裹在对象中-并传给调用对象","link":"#_3-命令模式-请求以指令的形式包裹在对象中-并传给调用对象","children":[]}]}],"git":{"createdTime":1702006037000,"updatedTime":1702367984000,"contributors":[{"name":"孙海波","email":"1064446256@qq.com","commits":3}]},"readingTime":{"minutes":5.07,"words":1520},"filePathRelative":"algorithm/designmode.md","localizedDate":"2023年12月8日","excerpt":"","autoDesc":true}');export{e as data};
